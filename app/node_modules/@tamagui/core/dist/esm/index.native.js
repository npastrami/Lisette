import { useResponderEvents } from "@tamagui/react-native-use-responder-events";
import {
  Stack as WebStack,
  Text as WebText,
  View as WebView,
  composeEventHandlers,
  setupHooks
} from "@tamagui/web";
import { createElement } from "react";
import { createOptimizedView } from "./createOptimizedView";
import { getBaseViews } from "./getBaseViews";
import { useElementLayout } from "./hooks/useElementLayout";
import { usePlatformMethods } from "./hooks/usePlatformMethods";
import { usePressability } from "./vendor/Pressability";
export * from "@tamagui/web";
export * from "./reactNativeTypes";
const View = WebView, Stack = WebStack, Text = WebText, baseViews = getBaseViews();
setupHooks({
  getBaseViews,
  usePropsTransform(elementType, propsIn, hostRef) {
    const {
      // event props
      onMoveShouldSetResponder,
      onMoveShouldSetResponderCapture,
      onResponderEnd,
      onResponderGrant,
      onResponderMove,
      onResponderReject,
      onResponderRelease,
      onResponderStart,
      onResponderTerminate,
      onResponderTerminationRequest,
      onScrollShouldSetResponder,
      onScrollShouldSetResponderCapture,
      onSelectionChangeShouldSetResponder,
      onSelectionChangeShouldSetResponderCapture,
      onStartShouldSetResponder,
      onStartShouldSetResponderCapture,
      // android
      collapsable,
      focusable,
      // deprecated,
      accessible,
      accessibilityDisabled,
      onLayout,
      hrefAttrs,
      ...viewProps
    } = propsIn;
    if (usePlatformMethods(hostRef), useElementLayout(hostRef, onLayout), useResponderEvents(hostRef, {
      onMoveShouldSetResponder,
      onMoveShouldSetResponderCapture,
      onResponderEnd,
      onResponderGrant,
      onResponderMove,
      onResponderReject,
      onResponderRelease,
      onResponderStart,
      onResponderTerminate,
      onResponderTerminationRequest,
      onScrollShouldSetResponder,
      onScrollShouldSetResponderCapture,
      onSelectionChangeShouldSetResponder,
      onSelectionChangeShouldSetResponderCapture,
      onStartShouldSetResponder,
      onStartShouldSetResponderCapture
    }), viewProps.href !== void 0 && hrefAttrs !== void 0) {
      const { download, rel, target } = hrefAttrs;
      download != null && (viewProps.download = download), rel != null && (viewProps.rel = rel), typeof target == "string" && (viewProps.target = target.charAt(0) !== "_" ? `_${target}` : target);
    }
    return viewProps;
  },
  useEvents(viewProps, events, { pseudos }, setStateShallow, staticConfig) {
    if (events?.onFocus && (viewProps.onFocus = events.onFocus), events?.onBlur && (viewProps.onBlur = events.onBlur), staticConfig.isInput) {
      if (events) {
        const { onPressIn, onPressOut, onPress } = events, inputEvents = {
          onPressIn,
          onPressOut: onPressOut || onPress
        };
        onPressOut && onPress && (inputEvents.onPressOut = composeEventHandlers(onPress, onPressOut)), Object.assign(viewProps, inputEvents);
      }
    } else {
      events && viewProps.hitSlop && (events.hitSlop = viewProps.hitSlop);
      const pressability = usePressability(events || null);
      if (events && events.onPress)
        for (const key in pressability) {
          const og = viewProps[key], val = pressability[key];
          viewProps[key] = og && !dontComposePressabilityKeys[key] ? composeEventHandlers(og, val) : val;
        }
    }
  },
  useChildren(elementType, children, viewProps, events, staticConfig) {
    if (process.env.NODE_ENV !== "test") {
      if (elementType === baseViews.View)
        return createOptimizedView(children, viewProps, baseViews);
      if (process.env.TAMAGUI_OPTIMIZE_NATIVE_VIEWS && elementType === baseViews.Text)
        return viewProps.children = children, createElement("RCTText", viewProps);
    }
  }
});
const dontComposePressabilityKeys = {
  onClick: !0
};
export {
  Stack,
  Text,
  View
};
//# sourceMappingURL=index.js.map
